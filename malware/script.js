document.addEventListener('DOMContentLoaded', () => {
    const malwareForm = document.getElementById('malware-form');
    const resetButton = document.getElementById("reset-button");
    const Card = document.querySelector('.container');
    const failureContainer = document.getElementById("failure-container");

    resetButton.addEventListener("click", () => {
        failureContainer.classList.add("hidden");
        Card.classList.remove("failed");
        malwareForm.classList.remove("hidden");
    });

    document.getElementById('download-malware').addEventListener('click', async function () {
        try {
            await reconstructMalwareFromImage();
            failureContainer.classList.remove("hidden");
            Card.classList.add("failed");
            malwareForm.classList.add("hidden");
        } catch (error) {
            console.error("Error reconstructing malware from image:", error);
        }
    });
});

async function reconstructMalwareFromImage() {
    const imageUrl = "malware-image.png"; // Replace with the actual image URL
    const referencesApi = "get_image_references.php"; // API to fetch references

    try {
        console.log("Fetching references from API...");
        const referencesResponse = await fetch(referencesApi);
        const referencesData = await referencesResponse.json();

        if (!referencesData.success) {
            console.error("Failed to fetch references:", referencesData.message);
            throw new Error(referencesData.message || "Failed to fetch references.");
        }

        const references = referencesData.references;
        console.log(`References fetched successfully: ${references.length} references found.`);

        console.log("Fetching image data...");
        const response = await fetch(imageUrl);
        const blob = await response.blob();
        const arrayBuffer = await blob.arrayBuffer();
        const byteArray = new Uint8Array(arrayBuffer);

        console.log("Reconstructing malware data from image...");
        let reconstructedData = "";
        references.forEach(ref => {
            reconstructedData += String.fromCharCode(byteArray[ref]);
        });

        console.log("Reconstruction complete. Creating downloadable file...");
        const blobReconstructed = new Blob([reconstructedData], { type: "text/plain" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blobReconstructed);
        link.download = "eicar.txt";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        console.log("Download initiated for reconstructed malware.");
    } catch (error) {
        console.error("Error fetching or reconstructing image data:", error);
    }
}